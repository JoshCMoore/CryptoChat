import java.util.LinkedList;
import java.util.List;

import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;

/**
 * Chat GUI for CSC 580 chat program. The SimpleChatUI class is just the "view"
 * of the chat, which is the Conversation object that is associated with the
 * window. This also contains some static fields to manage/create windows.
 * 
 */
public class SimpleChatUI extends javax.swing.JFrame {
    // *** IMPORTANT - change the CHAT_USER to your userid - only one instance
    // of a given username can be logged in to the chat hub at one time, so if
    // you don't change this, you might conflict with another student!
    private static final String CHAT_USER = "jcmoore5";
    private static final String CHAT_PASS = "password";
    
    private static HubSession hub;
    private static final List<SimpleChatUI> windows = new LinkedList<>();
    private Conversation convo;

    /**
     * Create a window for this conversation. If an inactive window exists, use
     * that - otherwise create a new window.
     * @param convo Conversation that this window tracks
     * @return The window
     */
    public static SimpleChatUI connectWindow(Conversation convo) {
        SimpleChatUI useWindow = windows.get(0);
        if (useWindow.convo != null) {
            // need a new window
            useWindow = new SimpleChatUI();
            useWindow.setVisible(true);
            windows.add(useWindow);
        }
        useWindow.convo = convo;
        return useWindow;
    }

    /**
     * Creates new form SimpleChatUI. This is private because it should not
     * be called from outside this class. If you want to create a window, use
     * the connectWindow() static method.
     */
    private SimpleChatUI() {
        initComponents();
        convo = null;
        setConnStatus(false);
        jMessageEntry.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jSendButtonActionPerformed(evt);
            }
        });
    }

    /**
     * Set window to reflect connected/disconnected state. When connected, the
     * message entry textbox and send button are active, as is the "Disconnect"
     * entry in the drop-down menu. When disconnected, all of these UI elements
     * are disabled.
     * @param conn true if there is an active connection
     */
    public void setConnStatus(boolean conn) {
        jMessageEntry.setEnabled(conn);
        jSendButton.setEnabled(conn);
        jMenuItemOtherPartyInfo.setEnabled(conn);
        jMenuSaveCertInfo.setEnabled(conn);
        jMenuItemDisconnect.setEnabled(conn);
        if (conn) {
            setStatus("Connected to " + convo.getOtherID());
        } else {
            setStatus("Not connected");
        }

    }

    /**
     * Disconnect this window from a conversation. Doesn't do anything for now
     * probably should destroy the window if it isn't the last one. Or maybe
     * it shouldn't - keep around so can look back at conversation after it
     * ends? TODO: decide the best way to handle this.
     */
    public void disconnectConvo() {
        convo = null;
        setConnStatus(false);
    }

    // Internal method to add message to chat window - called from event dispatch
    // thread
    private void internalAddToChatWindow(String message) {
        jChatConvo.append(message + "\n");
    }

    /**
     * Adds a message to the chat window.
     * @param message The message to add.
     */
    public void addToChatWindow(String message) {
        SwingUtilities.invokeLater(() -> {
            this.internalAddToChatWindow(message);
        });
    }

    // Internal method to change the status line - called from event dispatch thread
    private void internalSetStatus(String status) {
        jStatusLine.setText("Status: " + status);
    }

    /**
     * Change the status line at the bottom of the chat window
     * @param status the new status
     */
    public void setStatus(String status) {
        SwingUtilities.invokeLater(() -> {
            this.internalSetStatus(status);
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jUserDialog = new javax.swing.JDialog();
        jPanel1 = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jMessageEntry = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jChatConvo = new javax.swing.JTextArea();
        jSendButton = new javax.swing.JButton();
        jStatusLine = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItemConnect = new javax.swing.JMenuItem();
        jMenuItemOtherPartyInfo = new javax.swing.JMenuItem();
        jMenuSaveCertInfo = new javax.swing.JMenuItem();
        jMenuItemDisconnect = new javax.swing.JMenuItem();

        jButton1.setText("Connect");

        jLabel1.setText("  What user to you want to chat with?");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addGap(33, 33, 33))
        );

        javax.swing.GroupLayout jUserDialogLayout = new javax.swing.GroupLayout(jUserDialog.getContentPane());
        jUserDialog.getContentPane().setLayout(jUserDialogLayout);
        jUserDialogLayout.setHorizontalGroup(
            jUserDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jUserDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jUserDialogLayout.setVerticalGroup(
            jUserDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        jChatConvo.setEditable(false);
        jChatConvo.setColumns(20);
        jChatConvo.setLineWrap(true);
        jChatConvo.setRows(5);
        jChatConvo.setWrapStyleWord(true);
        jScrollPane1.setViewportView(jChatConvo);

        jSendButton.setText("Send");
        jSendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jSendButtonActionPerformed(evt);
            }
        });

        jStatusLine.setText("Status: Initializing");

        jMenu1.setText("Connection");

        jMenuItemConnect.setText("New Connection...");
        jMenuItemConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemConnectActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemConnect);

        jMenuItemOtherPartyInfo.setText("Other Party Info");
        jMenuItemOtherPartyInfo.setEnabled(false);
        jMenuItemOtherPartyInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemOtherPartyInfoActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemOtherPartyInfo);

        jMenuSaveCertInfo.setText("Save Certificate Info");
        jMenuSaveCertInfo.setEnabled(false);
        jMenuSaveCertInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSaveCertInfoActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuSaveCertInfo);
        
        jMenuItemDisconnect.setText("Disconnect");
        jMenuItemDisconnect.setEnabled(false);
        jMenuItemDisconnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemDisconnectActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemDisconnect);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jMessageEntry)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jStatusLine)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSendButton))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 526, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jMessageEntry)
                    .addComponent(jSendButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jStatusLine))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jSendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jSendButtonActionPerformed
        String msg = jMessageEntry.getText();
        convo.sendMessage(msg);
        internalAddToChatWindow("Me: " + msg);
        jMessageEntry.setText("");
    }//GEN-LAST:event_jSendButtonActionPerformed

    private void jMenuItemConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemConnectActionPerformed
        String s = (String) JOptionPane.showInputDialog(this,
                "Who do you want to chat with?", "Chat User Query",
                JOptionPane.PLAIN_MESSAGE, null, null, "");
        new Conversation(hub, s);
    }//GEN-LAST:event_jMenuItemConnectActionPerformed

    private void jMenuItemDisconnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemDisconnectActionPerformed
        convo.drop();
        convo = null;
    }//GEN-LAST:event_jMenuItemDisconnectActionPerformed
    
    private void jMenuItemSaveCertInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemOtherPartyInfoActionPerformed
//        JOptionPane.showMessageDialog(null, "Would you like to save the certificate of this ID?");
        if(JOptionPane.showConfirmDialog(this, "Would you like to save the certificate of this ID?")==0)
        	convo.saveCert();
    }
    
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        System.out.println("Window closing...");
        if (convo != null) {
            convo.drop();
            convo = null;
        }
        this.dispose();
    }//GEN-LAST:event_formWindowClosing

    private void jMenuItemOtherPartyInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemOtherPartyInfoActionPerformed
        JOptionPane.showMessageDialog(null, convo.getOtherInfo());
    }//GEN-LAST:event_jMenuItemOtherPartyInfoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SimpleChatUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SimpleChatUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SimpleChatUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SimpleChatUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        Conversation.setChatViewController(new GUIViewController());
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                // First window is a little different - initially disconnected
                SimpleChatUI firstWin = new SimpleChatUI();
                windows.add(firstWin);
                firstWin.setVisible(true);
                hub = new HubSession(new LoginCredentials(new ChatKeyManager(CHAT_USER)));

                firstWin.setStatus("No active chat");
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JTextArea jChatConvo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItemConnect;
    private javax.swing.JMenuItem jMenuItemDisconnect;
    private javax.swing.JMenuItem jMenuItemOtherPartyInfo;
    private javax.swing.JMenuItem jMenuSaveCertInfo;
    private javax.swing.JTextField jMessageEntry;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jSendButton;
    private javax.swing.JLabel jStatusLine;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JDialog jUserDialog;
    // End of variables declaration//GEN-END:variables
}
